apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

android {
    compileSdkVersion 30
    buildToolsVersion "29.0.3"

    def DEFAULT_VERSION = "undefined"
    def VERSION = System.getenv('RELEASE_VERSION') == null
            ? DEFAULT_VERSION :
            System.getenv('RELEASE_VERSION')


    defaultConfig {
        applicationId "me.apomazkin.polytrainer"
        minSdkVersion 21
        targetSdkVersion 30
        versionName VERSION
        versionCode getVersionCode(versionName)
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            def keystoreProperties = new Properties()
            def keystorePropsFile = file("keystore/keystore_config_release")
            if (keystorePropsFile.exists()) {
                file("keystore/keystore_config_release").withInputStream { keystoreProperties.load(it) }
                storeFile file("$keystoreProperties.storeFile")
                storePassword "$keystoreProperties.storePassword"
                keyAlias "$keystoreProperties.keyAlias"
                keyPassword "$keystoreProperties.keyPassword"
            } else {
                storeFile file("keystore/keystore_upload")
                storePassword System.getenv('KEYSTORE_PASSWORD')
                keyAlias System.getenv('KEYSTORE_KEY_ALIAS')
                keyPassword System.getenv('KEYSTORE_PASSWORD')
            }
        }
    }

    buildTypes {
//        dev {
//            crunchPngs false
            // во флейворах
//            resConfigs "xxxhdpi"
//            FirebasePerformance {
//                instrumentationEnabled false
//            }
//        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        quiet false
        abortOnError true
        warningsAsErrors true
        ignoreWarnings false
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    buildFeatures {
        dataBinding = true
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"

    implementation project(path: ':core:core-db')
    implementation project(path: ':feature:feature-bottom-menu-api')
    implementation project(path: ':feature:feature-bottom-menu-impl')

    // AndroidX
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'

    //Dagger2
    implementation 'com.google.dagger:dagger:2.33'
    kapt "com.google.dagger:dagger-compiler:2.33"

    //Navigation
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.4'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.4'

    // Firebase
    implementation platform('com.google.firebase:firebase-bom:26.8.0')
    implementation 'com.google.firebase:firebase-crashlytics'
    implementation 'com.google.firebase:firebase-analytics'

    // Test
    //noinspection GradleDependency
    testImplementation 'junit:junit:4.12'
    //noinspection GradleDependency
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    //noinspection GradleDependency
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

static int getVersionCode(String versionName) {
    def result = ""
    def DEFAULT_VERSION_CODE = 1
    def MAX_MAJOR_VERSION = 213
    def LENGTH_MAJOR_VERSION = 3
    def MAX_MINOR_VERSION = 999
    def LENGTH_MINOR_VERSION = 3
    def MAX_PATCH_VERSION = 9999
    def LENGTH_PATCH_VERSION = 4
    if (!verifyVersion(versionName)) return DEFAULT_VERSION_CODE

    def versionList = versionName.split("\\.")
    def major = versionList[0]
    def minor = versionList[1]
    def patch = versionList[2]

    if (major.isInteger() && major.toInteger() <= MAX_MAJOR_VERSION) {
        result += alignVersion(major, LENGTH_MAJOR_VERSION)
    } else {
        return DEFAULT_VERSION_CODE
    }

    if (minor.isInteger() && minor.toInteger() <= MAX_MINOR_VERSION) {
        result += alignVersion(minor, LENGTH_MINOR_VERSION)
    } else {
        return DEFAULT_VERSION_CODE
    }

    if (patch.isInteger() && patch.toInteger() <= MAX_PATCH_VERSION) {
        result += alignVersion(patch, LENGTH_PATCH_VERSION)
    } else {
        return DEFAULT_VERSION_CODE
    }

    return result.isInteger() ? result.toInteger() : DEFAULT_VERSION_CODE
}

static boolean verifyVersion(String value) {
    return value.count(".") + 1 == 3
}

static String alignVersion(String value, int length) {
    def aligned = ""
    def ALIGN_VALUE = "0"
    for (int i = value.length(); i < length; i++) {
        aligned += ALIGN_VALUE
    }
    return aligned + value
}